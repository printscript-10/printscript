plugins {
  id 'org.jetbrains.kotlin.jvm'
  id 'jacoco'
  id 'maven-publish'
}

repositories {
  mavenCentral()
}

configurations {
  ktlint
}

dependencies {
  testImplementation 'org.jetbrains.kotlin:kotlin-test'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
  ktlint("com.pinterest:ktlint:0.49.1") {
    attributes {
      attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
    }
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = "BUNDLE"
      limit {
        counter = 'INSTRUCTION'
        value = 'COVEREDRATIO'
        minimum = 0.8
      }
    }
  }
}

tasks.register("ktlintCheck", JavaExec) {
  group = "verification"
  description = "Check Kotlin code style."
  classpath = configurations.ktlint
  mainClass = "com.pinterest.ktlint.Main"
  args "src/**/*.kt", "**.kts", "!**/build/**"
}

tasks.named("check") {
  dependsOn tasks.named("jacocoTestCoverageVerification")
  dependsOn tasks.named("ktlintCheck")
}

tasks.register("ktlintFormat", JavaExec) {
  group = "formatting"
  description = "Fix Kotlin code style deviations."
  classpath = configurations.ktlint
  mainClass = "com.pinterest.ktlint.Main"
  jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"
  args "-F", "src/**/*.kt", "**.kts", "!**/build/**"
}

task installGitHooks(type: Copy) {
  from new File(rootProject.rootDir, 'hooks/pre-commit')
  into { new File(rootProject.rootDir, '.git/hooks') }
  doLast {
    file("${rootProject.rootDir}/.git/hooks/pre-commit").setExecutable(true)
  }
}

build.dependsOn installGitHooks

jacocoTestReport {
  dependsOn test

  reports {
    xml.required = false
    csv.required = false
    html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
  }
}

publishing {
  repositories {
    maven {
      name = "GitHubPackages"
      url = uri("https://maven.pkg.github.com/printscript-10/printscript")
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }
  publications {
    gpr(MavenPublication) {
      from(components.java)
    }
  }
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

kotlin {
  jvmToolchain(21)
}
